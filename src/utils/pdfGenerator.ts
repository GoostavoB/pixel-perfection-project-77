/**
 * Hospital Bill Checker - Client-Side PDF Generator
 * React/TypeScript utility for generating PDFs from HTML
 */

import html2pdf from 'html2pdf.js';

interface PDFOptions {
  filename?: string;
  margin?: number | number[];
  format?: 'a4' | 'letter';
  orientation?: 'portrait' | 'landscape';
}

/**
 * Generate PDF from HTML string
 */
export const generatePDFFromHTML = async (
  html: string,
  options: PDFOptions = {}
): Promise<void> => {
  const {
    filename = 'document.pdf',
    margin = 10,
    format = 'a4',
    orientation = 'portrait'
  } = options;

  // Create temporary container
  const container = document.createElement('div');
  container.style.position = 'absolute';
  container.style.left = '-9999px';
  container.style.width = format === 'a4' ? '210mm' : '8.5in';
  container.innerHTML = html;
  document.body.appendChild(container);

  try {
    const opt = {
      margin,
      filename,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { 
        scale: 2, 
        useCORS: true,
        logging: false 
      },
      jsPDF: { 
        unit: 'mm', 
        format, 
        orientation 
      },
      pagebreak: { mode: ['avoid-all', 'css', 'legacy'] }
    };

    await html2pdf().set(opt).from(container).save();
  } finally {
    document.body.removeChild(container);
  }
};

/**
 * Generate Report PDF from analysis data
 */
export const generateReportPDF = async (
  reportHTML: string,
  jobId: string
): Promise<void> => {
  await generatePDFFromHTML(reportHTML, {
    filename: `medical-bill-report-${jobId.substring(0, 8)}.pdf`,
    margin: [10, 10, 10, 10],
    format: 'a4',
    orientation: 'portrait'
  });
};

/**
 * Generate Dispute Letter PDF
 */
export const generateDisputeLetterPDF = async (
  letterHTML: string,
  jobId: string
): Promise<void> => {
  await generatePDFFromHTML(letterHTML, {
    filename: `dispute-letter-${jobId.substring(0, 8)}.pdf`,
    margin: [15, 15, 15, 15],
    format: 'letter',
    orientation: 'portrait'
  });
};

/**
 * Generate fallback text report if HTML not available
 */
export const generateTextReport = (
  data: any,
  jobId: string
): void => {
  const analysis = data.full_analysis || {};
  const uiSummary = data.ui_summary || {};
  
  const report = `HOSPITAL BILL ANALYSIS REPORT
Generated: ${new Date().toLocaleDateString()}
Hospital: ${data.hospital_name || 'Unknown'}

=== SUMMARY ===
High Priority Issues: ${uiSummary.high_priority_count || 0}
Potential Issues: ${uiSummary.potential_issues_count || 0}
Estimated Savings: $${(uiSummary.estimated_savings_if_corrected || 0).toLocaleString()}
Data Sources: ${(uiSummary.data_sources_used || []).join(', ')}

=== HIGH PRIORITY ISSUES ===
${(analysis.high_priority_issues || []).map((issue: any, i: number) => 
  `${i + 1}. ${issue.type}: ${issue.description}\n   Amount: $${(issue.amount || 0).toLocaleString()}`
).join('\n\n')}

=== POTENTIAL ISSUES ===
${(analysis.potential_issues || []).map((issue: any, i: number) => 
  `${i + 1}. ${issue.type}: ${issue.description}`
).join('\n\n')}

=== RECOMMENDATIONS ===
- Review all high-priority issues with your billing department
- Request itemized bill if not already received
- Contact your insurance provider to verify coverage
- Consider filing a dispute for identified overcharges

This report was generated by Hospital Bill Checker.
For questions, visit https://hospitalbillchecker.com
  `.trim();
  
  const blob = new Blob([report], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = `medical-bill-analysis-${jobId.substring(0, 8)}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};
